# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: ['**']          # 任意分支 push 都触发
  pull_request:
    branches: ['**']          # 任意分支的 PR 也触发

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        uv sync
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        uv run -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        uv run -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest & coverage
      run:
        uv run -m pytest --cov

    # 2. 上传 HTML 报告，成功后可在 Actions 页面 “Summary → Artifacts” 下载
    - name: Upload HTML coverage report
      if: always()                   # 即使覆盖率没到 100 % 也上传，方便调试
      uses: actions/upload-artifact@v4
      with:
        name: html-coverage-report
        path: htmlcov/
        retention-days: 7   
    - name: Upload test report
      if: always()                   # 即使覆盖率没到 100 % 也上传，方便调试
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test.html
        retention-days: 7   
